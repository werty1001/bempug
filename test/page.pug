
- var n = '\n';

include ../index

-
	BEMPUG.modifier = '--';
	BEMPUG.element = '__';

	BEMPUG.tagByName = {list: 'ul', form: 'form', fields: 'fieldset'};

	BEMPUG.beforeParse[ 'input' ] = function( block ) {
		
		if ( typeof block.data.m === 'undefined' ) block.data.m = 'default';
		block.tag = 'input';

	};

	BEMPUG.afterParse[ 'page' ] = function( block ) {

		block.setTag( 'body' );
		block.addModifier( 'test' );
		block.attributes.itemscope = true;
		block.attributes.itemtype = 'http://schema.org/WebPage';

	};

doctype
+b('html', 'no-js', 'html')(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='X-UA-Compatible' content='IE=edge')
		meta(name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no')

		= n

		title Test page
		meta(name='description' content='This HTML code compiled from Pug.')


	+b('page')



		= n + n
		// Simple example 

		+b('block')
			+e('element') Text


		= n + n
		// You can disable parent mode and element will ignore this block 

		+b('header')
			+b('grid', {p: false})
				+e('logo') Logo

		= n

		+b('header')
			+b('grid', {p:0})
				+e('logo') Logo


		= n + n
		// Element depends on parent block 

		+b('content')
			+e('layout') Content


		= n + n
		// You can set element directly 

		+b('content')
			+e('layout', {p: 'page'}) Content


		= n + n
		// Block and element have modifier 

		+b('alert', 'success')
			+e('text', 'bolder') Success


		= n + n
		// Block and element have more than one modifier 

		+b('alert', 'success.active')
			+e('text', 'bolder.italic') Success


		= n + n
		// Also, you can set modifiers in data argument 

		+b('alert', {m: 'success.active'}) Success


		= n + n
		// Default tag is div, but you can set it directly 

		+b('news', {}, 'article')
			+e('title', {}, 'h1') Title

		= n

		+b('news', {t: 'article'})
			+e('title', {t: 'h1'}) Title


		= n + n
		// Sometimes mixin can be smart and tag depends on parent or attributes 

		+b('list', {t: 'ul'})
			+e('item') My item 1
			+e('item') My item 2
			+e('item') My item 3

		= n

		+b('link')(href='https://www.npmjs.com/package/bempug')
			+b('text') My text


		= n + n
		// Also, you can use tagByName global option for set default tag by name 

		+b('list')
			+e('item') Item
			+e('item') Item

		= n

		+b('form')
			+e('fields') Fields


		= n + n
		// Block is mixed with element 

		+b('title', {e: 'article'}) Title


		= n + n
		// You can set name of element in mix with colon 

		+b('title', {e: 'article:my-name'}) Title


		= n + n
		// Block is mixed with two elements 

		+b('title', {e: ['article', 'content']}) Title


		= n + n
		// Block is mixed with element of parent block 

		+b('news')
			+b('title', {e: true}) Title

		= n

		+b('news')
			+b('title', {e:1}) Title


		= n + n
		// Also, you can use ampersand & sign as parent block reference 

		+b('news')
			+b('title', {e: '&'}) Title
			+b('text', {e: '&:description'}) Text


		= n + n
		// Block is mixed with element which has modifiers 

		+b('title', {e: 'news|bolder.size-m'}) Title


		= n + n
		// Element is mixed with another element 

		+b( 'footer' )
			+e( 'bottom', {e: 'page'} )


		= n + n
		// Element is mixed with block 

		+b( 'footer' )
			+e( 'bottom', {b: 'grid'} )


		= n + n
		// Block is mixed with another block 

		+b('article', {b: 'news'}) Content


		= n + n
		// Block is mixed with another block which has modifiers 

		+b('article', {b: 'news|first'}) Content


		= n + n
		// Block is mixed with two blocks which have modifiers 

		+b('article', {b: ['news|first','fixed|active']}) Content


		= n + n
		// Also, you can set separators in data argument 'modifier|element' and ignore global settings 

		+b('news', {e: 'content', m: 'first', s: '---|___' })
			+b('text', {e: true, m: 'bolder'}) Text


		= n + n
		// You can get current block name 

		+b('nav')
			+e('item')= 'Item of ' + BEMPUG.getCurrentBlock()

				+b('myblock')
					+e('item')= 'Item of ' + BEMPUG.getCurrentBlock()




		= n + n
		// Self closing tags 

		+b('image','','img')
		+b('field',{t: 'input'})


		= n + n
		// Default tag depends on parent tag for any descendant 

		+b('description')
			+e('list',{}, 'ul')
				+e('item') My item 1
				+e('item') My item 2
				+e('item')
					+e('mark') My mark
				+e('item')
					+b('text') My item 4




		= n + n
		// Before parse callback 

		+b('input', {m: 'search'})
		+b('input')








		= n + n + n + n + n + n + n + n
		//
		// Crash test 
		//

		= n + n

		+b(' block ',' mod ',' div ')
			+e(' el ',' mod ',' div ') With space

		= n

		+b(0,{m: ' big . small   ', e: [' page |  ', ' content : test | active   '], b: ' text | bold .    small ' },0)
			+e(0,{m: ' big . small . bold  ', p: ' content     '},0)

		= n

		+b
			+e Without anything

		= n

		+b([],[],[])
			+e([],[],[]) []

		= n

		+b({},{},{})
			+e({},{},{}) {}

		= n

		+b('','','')
			+e('','','') ('')

		= n

		+b(' ',' ',' ')
			+e(' ',' ',' ') (' ')

		= n

		+b(null,null,null)
			+e(null,null,null) null

		= n

		+b(false,false,false)
			+e(false,false,false) false

		= n

		+b(true,true,true)
			+e(true,true,true) true

		= n

		+b(1,1,1)
			+e(1,1,1) 1

		= n

		+b(0,0,0)
			+e(0,0,0) 0

		= n

		+b([],{m: [], p: [], e: [], b: [], s: [], t: [] },[])
			+e([],{m: [], p: [], e: [], b: [], s: [], t: [] },[]) {[]}

		= n

		+b({},{m: {}, p: {}, e: {}, b: {}, s: {}, t: {} },{})
			+e({},{m: {}, p: {}, e: {}, b: {}, s: {}, t: {} },{}) {{}}

		= n

		+b(0,{m: 0, p: 0, e: 0, b: 0, s: 0, t: 0 },0)
			+e(0,{m: 0, p: 0, e: 0, b: 0, s: 0, t: 0 },0) {0}

		= n

		+b(1,{m: 1, p: 1, e: 1, b: 1, s: 1, t: 1 },1)
			+e(1,{m: 1, p: 1, e: 1, b: 1, s: 1, t: 1 },1) {1}

		= n

		+b(null,{m: null, p: null, e: null, b: null, s: null, t: null },null)
			+e(null,{m: null, p: null, e: null, b: null, s: null, t: null },null) {null}

		= n

		+b(false,{m: false, p: false, e: false, b: false, s: false },false)
			+e(false,{m: false, p: false, e: false, b: false, s: false },false) {false}

		= n

		+b(true,{m: true, p: true, e: true, b: true, s: true },true)
			+e(true,{m: true, p: true, e: true, b: true, s: true },true) {true}


		= n

		+b('',{m: '', p: '', e: '', b: '', s: '' },'')
			+e('',{m: '', p: '', e: '', b: '', s: '' },'') {''}


		= n

		+b(' ',{m: ' ', p: ' ', e: ' ', b: ' ', s: ' ' },' ')
			+e(' ',{m: ' ', p: ' ', e: ' ', b: ' ', s: ' ' },' ') {' '}



		= n + n

